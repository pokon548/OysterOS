From 4f95a0c38c1146364601aaeb4a77797394e03dd3 Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Thu, 2 May 2024 13:15:31 +0200
Subject: [PATCH 1/3] compositor: Make surface actors unreactive after losing
 their surface

These actors are expected to be destroyed along with their surface, this
however happens later in the process, so there is a moment where actors
are eligible for picking, but do not have a surface anymore.
---
 src/compositor/meta-surface-actor-wayland.c | 22 +++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/src/compositor/meta-surface-actor-wayland.c b/src/compositor/meta-surface-actor-wayland.c
index 819672c4abd..454414fde32 100644
--- a/src/compositor/meta-surface-actor-wayland.c
+++ b/src/compositor/meta-surface-actor-wayland.c
@@ -260,6 +260,18 @@ out:
   parent_class->apply_transform (actor, matrix);
 }
 
+static void
+on_surface_disposed (gpointer user_data,
+                     GObject *destroyed_object)
+{
+  MetaSurfaceActorWayland *self = user_data;
+
+  g_assert (destroyed_object == self->surface);
+
+  clutter_actor_set_reactive (CLUTTER_ACTOR (self), FALSE);
+  self->surface = NULL;
+}
+
 static void
 meta_surface_actor_wayland_dispose (GObject *object)
 {
@@ -272,8 +284,9 @@ meta_surface_actor_wayland_dispose (GObject *object)
 
   if (self->surface)
     {
-      g_object_remove_weak_pointer (G_OBJECT (self->surface),
-                                    (gpointer *) &self->surface);
+      g_object_weak_unref (G_OBJECT (self->surface),
+                           on_surface_disposed,
+                           self);
       self->surface = NULL;
     }
 
@@ -308,8 +321,9 @@ meta_surface_actor_wayland_new (MetaWaylandSurface *surface)
   g_assert (meta_is_wayland_compositor ());
 
   self->surface = surface;
-  g_object_add_weak_pointer (G_OBJECT (self->surface),
-                             (gpointer *) &self->surface);
+  g_object_weak_ref (G_OBJECT (self->surface),
+                     on_surface_disposed,
+                     self);
 
   return META_SURFACE_ACTOR (self);
 }
-- 
GitLab


From a739236338cdab94588d65c3502912d3f5ba1602 Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Thu, 2 May 2024 13:21:21 +0200
Subject: [PATCH 2/3] wayland: Make subsurface actors unreactive early during
 destruction

When unmapping a subsurface, it does lose early its connection to the
parent surface. This is however a deciding factor in determining whether
the surface (role) has a window.

Make the subsurface actor unreactive if its connection to the parent
MetaWindow was severed, since it should not be eligible for picking anymore.
---
 src/wayland/meta-wayland-subsurface.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/wayland/meta-wayland-subsurface.c b/src/wayland/meta-wayland-subsurface.c
index fd9df170b6d..9d4533e9314 100644
--- a/src/wayland/meta-wayland-subsurface.c
+++ b/src/wayland/meta-wayland-subsurface.c
@@ -437,6 +437,7 @@ permanently_unmap_subsurface (MetaWaylandSurface *surface)
   MetaWaylandTransaction *transaction;
   MetaWaylandSurface *parent;
   MetaWaylandSurfaceState *pending_state;
+  MetaSurfaceActor *surface_actor;
 
   op = get_subsurface_placement_op (surface, NULL,
                                     META_WAYLAND_SUBSURFACE_PLACEMENT_BELOW);
@@ -465,6 +466,8 @@ permanently_unmap_subsurface (MetaWaylandSurface *surface)
       parent = parent->committed_state.parent;
     }
 
+  surface_actor = meta_wayland_surface_get_actor (surface);
+  clutter_actor_set_reactive (CLUTTER_ACTOR (surface_actor), FALSE);
   surface->committed_state.parent = NULL;
 }
 
-- 
GitLab


From 78d6683d84450921c89d3b89f8ca07db18159b7e Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Thu, 2 May 2024 13:23:54 +0200
Subject: [PATCH 3/3] wayland: Double check surface/window before looking for
 modals

While it should not be expected that we pick the pointer into a
MetaSurfaceActor that is disembodied of its MetaWaylandSurface/MetaWindow,
the paths where this should be enforced are somewhat scattered.

So account for the situation in picking code, and prefer a NULL surface
over a crash. This operates on the assumption that this inconsistent state
where Mutter didn't know better to pick a correct surface actor will be fixed
by later crossing events resolving the intermediate state, and that no
other input events will be received meanwhile.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/3393
---
 src/wayland/meta-wayland-pointer.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/wayland/meta-wayland-pointer.c b/src/wayland/meta-wayland-pointer.c
index 88b27f84d15..cf6008064a3 100644
--- a/src/wayland/meta-wayland-pointer.c
+++ b/src/wayland/meta-wayland-pointer.c
@@ -600,10 +600,13 @@ repick_for_event (MetaWaylandPointer *pointer,
     {
       MetaSurfaceActorWayland *actor_wayland =
         META_SURFACE_ACTOR_WAYLAND (actor);
+      MetaWindow *window = NULL;
 
       surface = meta_surface_actor_wayland_get_surface (actor_wayland);
+      if (surface)
+        window = meta_wayland_surface_get_window (surface);
 
-      if (surface && meta_window_has_modals (meta_wayland_surface_get_window (surface)))
+      if (window && meta_window_has_modals (window))
         surface = NULL;
     }
   else
-- 
GitLab

